set nocompatible " We're running Vim, not Vi!

""""" GENERAL

syntax on
set number
set ruler
set encoding=utf-8
set mouse=a     " Allow scrolling and pane selection in all modes
set backspace=2 " Allow backspace over indent, eol, start
set hidden      " Modified buffers are 'hidden' instead of unloaded
set directory=$DOTFILES/vim/swapfiles// " Change swapfile location
set cursorline  " Highlights the line that the cursor is on
set timeoutlen=300 " How long vim waits mid key sequence before timing out

filetype on
filetype indent on
filetype plugin on

let mapleader=","

""""" INDENTATION

set tabstop=2      " Width of TAB character
set softtabstop=2  " Width of <TAB> key
set shiftwidth=2   " Width for formatting (>, =)
set expandtab      " Convert tabs to spaces
set smarttab       " Use shiftwidth when inserting a tab in front of a line
set shiftround     " Round indent to multiple of shiftwidth

""""" APPEARANCE

" Allows true colour to be rendered inside tmux
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set termguicolors

set noshowmode  " Don't show mode in status bar, as lightline does it
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ 'component': {
      \   'lineinfo': "%{line('.') . '/' . line('$') . ':' . col('.')}",
      \   'filename': "%{expand('%')}",
      \ },
      \ }

set background=dark

""""" SEARCH

set hlsearch "highlight searches

" Ignores case unless search has uppercase chars
set ignorecase
set smartcase

""""" FOLDING

" Toggle fold
nnoremap <Space> za

set foldmethod=indent
set foldlevelstart=99 " Unfold everything when opening file

""""" MISCELLANEOUS MAPPINGS

" Uppercase word
nnoremap <leader>u gUiw

" Move lines up/down
nnoremap <C-J> ddp
nnoremap <C-K> kddpk

" Cycle though buffers
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>

nnoremap <C-G> :Files<CR>

nnoremap <CR> o<Esc>
nnoremap <leader>g V:OpenGithubFile<CR>
vnoremap <leader>g :OpenGithubFile<CR>

nnoremap <leader>m :Git blame<CR>

nnoremap <leader>tn :TestNearest<CR>

nnoremap <leader>s :source ~/.vimrc<CR>

nnoremap <leader>v :belowright 15sp ~/.vimrc<CR>

nnoremap <leader>a :Ag<CR>

nnoremap <leader>n :NERDTree<CR>

inoremap <tab> <C-N>

nnoremap <leader>fi :ALEFix<CR>
nnoremap <leader>ff :ALEFirst<CR>
nnoremap <leader>fn :ALENext<CR>

autocmd FileType ruby nnoremap <buffer> <leader>b orequire "pry"; binding.pry<ESC>
autocmd FileType python nnoremap <buffer> <leader>b oimport pdb; pdb.set_trace()<ESC>

""""" PLUGINS

call plug#begin('~/.vim/plugged')

Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'wikitopian/hardmode'
Plug 'leafgarland/typescript-vim'
Plug 'scrooloose/nerdtree'
Plug 'Valloric/MatchTagAlways'
Plug 'jimenezrick/vimerl'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'airblade/vim-gitgutter'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'christoomey/vim-tmux-runner'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-endwise'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-commentary'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tyru/open-browser.vim'
Plug 'tyru/open-browser-github.vim'
Plug 'janko-m/vim-test'
Plug 'tjammer/blayu.vim'
Plug 'mhartington/oceanic-next'
Plug 'tpope/vim-dispatch'
Plug 'Rigellute/rigel'
Plug 'cespare/vim-toml'
Plug 'chriskempson/base16-vim'
Plug 'junegunn/fzf.vim'
Plug 'google/vim-jsonnet'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'plasticboy/vim-markdown'

call plug#end()

colorscheme base16-gruvbox-dark-hard

""""" PLUGIN SETTINGS

let g:indent_guides_guide_size=1

let g:ale_fixers = {'ruby': ['rubocop'], 'go': ['goimports'], 'rust': ['rustfmt'], 'javascript': ['prettier'], 'css': ['stylelint']}
let g:ale_ruby_rubocop_executable='bundle'
let g:ale_linters = {'rust': ['cargo']}
let g:ale_rust_rustc_options = '' " Default option requires nightly

let test#strategy = "dispatch"
autocmd BufRead *.rs :setlocal tags=./rusty-tags.vi;/
